#server:
#  port: 8087
#  servlet:
#    context-path: '/ead-authuser/'

# Conecta com o configserver e pega as configurações que ele está gerenciando, por isso as outras partes estão comentadas
#  pq já está tudo no git, sendo gerenciado pelo ead-config-server.
spring:
  application:
    name: ead-authuser-service
  config:
    import: 'configserver:'
  cloud:
    config:
      discovery:
        serviceId: ead-config-server
#  datasource:
#    url: 'jdbc:postgresql://${DATABASE_HOST:localhost}:${DATABASE_PORT:5432}/${DATABASE_NAME:ead_authuser}'
#    username: ${DATABASE_USER:bemindersuser}
#    password: ${DATABASE_PASSWORD:beminders}
#  jpa:
#    hibernate:
#      # cria as tabelas no banco automaticamente
#      ddl-auto: update
#      dialect: org.hibernate.dialect.PostgreSQLDialect
#      jdbc:
#        lob.non-contextual-creation: true
#    properties:
#      hibernate:
#        show_sql: true
#  output:
#    ansi:
#      enabled: Always
#  rabbitmq:
#    addresses: amqps://jjrhjjqm:SElN_DfJmKmHH31-LRuMnjxaXuKgcvfC@puffin.rmq2.cloudamqp.com/jjrhjjqm
#
#logging:
#  level:
#    com.ead: TRACE
#    root: INFO
#    org.springframework.web: DEBUG
#    org.hibernate: INFO
#
#ead:
#  api:
#    url:
#      course: 'http://ead-course-service/ead-course'
#  broker:
#    exchange:
#      # Onde sera enviado os eventos
#      userEvent: ead.userevent
#
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: 'http://localhost:8761/eureka'
#  instance:
#    hostname: localhost
#
#resilience4j:
#  circuitbreaker:
#    instances:
#      circuitbreakerInstance:
#        slidingWindowSize: 30
#        permittedNumberOfCallsInHalfOpenState: 2
#        slidingWindowType: TIME_BASED
#        minimumNumberOfCalls: 2
#        waitDurationInOpenState: 30s
#        failureRateThreshold: 80
#  retry:
#    instances:
#      retryInstance:
#        maxRetryAttempts: 3
#        waitDuration: 5s
